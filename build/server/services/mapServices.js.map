{"version":3,"sources":["../../../api/server/services/mapServices.js"],"names":["mapServices","database","sequelize","query","result","console","log","dzo"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;;;;;uBAGiBC,mBAASC,SAAT,CAAmBC,KAAnB,CAAyB,yEAAzB,C;;;AAAdC,gBAAAA,M;iDAMCA,MAAM,CAAC,CAAD,C;;;;;AAEbC,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;;qDAIuBC,G;;;;;;;;uBAEFN,mBAASC,SAAT,CAAmBC,KAAnB,CAAyB,kFAAgFI,GAAhF,GAAoF,IAA7G,C;;;AAAfH,gBAAAA,M;kDACCA,MAAM,CAAC,CAAD,C;;;;;AAEbC,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;;eAOYN,W","sourcesContent":["import database from '../src/models';\n\nclass mapServices{\n\tstatic async getAlldzoThrom(){\n\t\ttry{\n\t\t\tconst result= await database.sequelize.query('select ST_AsGeoJSON(geom),name,thromdetyp,shape_area from dzo_thromdes;',)\n\t\t\t// const boundaries=result.map((row)=>{\n\t\t\t// \tlet geojson=JSON.parse(row.st_asgeojson);\n\t\t\t// \treturn geojson;\n\t\t\t// })\n\t\t\t\n\t\t\treturn result[0]\n\t\t}catch(error){\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\tstatic async getBuilding(dzo){\n\t\ttry {\n\t\t\tconst result = await database.sequelize.query(\"select ST_AsGeoJSON(geom),osm_id from buildings_rectified where dzongkhag = '\"+dzo+\"';\")\n\t\t\treturn result[0]\n\t\t}catch (error){\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\t\n}\n\nexport default mapServices;\n"],"file":"mapServices.js"}