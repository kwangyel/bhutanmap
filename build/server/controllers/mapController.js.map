{"version":3,"sources":["../../../api/server/controllers/mapController.js"],"names":["util","Util","mapController","req","res","mapServices","getAlldzoThrom","dzoThromdes","length","result","map","row","geojson","JSON","parse","st_asgeojson","properties","name","thromdetype","thromdetyp","area","shape_area","setSuccess","send","setError","dzo","params","getBuilding","buildings","id","osm_id","console","log"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,IAAI,GAAC,IAAIC,iBAAJ,EAAX;;IAEMC,a;;;;;;;;;;;;oDACuBC,G,EAAIC,G;;;;;;;;uBAENC,wBAAYC,cAAZ,E;;;AAAlBC,gBAAAA,W;;AACN,oBAAGA,WAAW,CAACC,MAAZ,GAAqB,CAAxB,EAA0B;AACnBC,kBAAAA,MADmB,GACZF,WAAW,CAACG,GAAZ,CAAgB,UAACC,GAAD,EAAO;AACnC,wBAAIC,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,YAAf,CAAZ;AACAH,oBAAAA,OAAO,CAACI,UAAR,GAAqB;AAAEC,sBAAAA,IAAI,EAAEN,GAAG,CAACM,IAAZ;AAAkBC,sBAAAA,WAAW,EAAEP,GAAG,CAACQ,UAAnC;AAA+CC,sBAAAA,IAAI,EAAET,GAAG,CAACU;AAAzD,qBAArB;AACA,2BAAOT,OAAP;AACA,mBAJY,CADY;AAOzBZ,kBAAAA,IAAI,CAACsB,UAAL,CAAgB,GAAhB,EAAoB,oBAApB,EAAyCb,MAAzC;AACA,iBARD,MAQK;AACJT,kBAAAA,IAAI,CAACsB,UAAL,CAAgB,GAAhB,EAAoB,mBAApB;AACA;;iDACMtB,IAAI,CAACuB,IAAL,CAAUnB,GAAV,C;;;;;AAEPJ,gBAAAA,IAAI,CAACwB,QAAL,CAAc,GAAd;iDAEOxB,IAAI,CAACuB,IAAL,CAAUnB,GAAV,C;;;;;;;;;;;;;;;;;;;;;qDAIgBD,G,EAAIC,G;;;;;;AACrBqB,gBAAAA,G,GAAOtB,GAAG,CAACuB,M,CAAXD,G;;;uBAEiBpB,wBAAYsB,WAAZ,CAAwBF,GAAxB,C;;;AAAjBG,gBAAAA,S;;AACN,oBAAGA,SAAS,CAACpB,MAAV,GAAmB,CAAtB,EAAwB;AACjBC,kBAAAA,MADiB,GACRmB,SAAS,CAAClB,GAAV,CAAc,UAACC,GAAD,EAAO;AACnC,wBAAIC,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACI,YAAf,CAAZ;AACAH,oBAAAA,OAAO,CAACI,UAAR,GAAqB;AAACa,sBAAAA,EAAE,EAAElB,GAAG,CAACmB,MAAT;AAAiBb,sBAAAA,IAAI,EAAEN,GAAG,CAACM;AAA3B,qBAArB;AACA,2BAAOL,OAAP;AACA,mBAJc,CADQ;AAMvBZ,kBAAAA,IAAI,CAACsB,UAAL,CAAgB,GAAhB,EAAoB,qBAApB,EAA0Cb,MAA1C;AACA,iBAPD,MAOK;AACJT,kBAAAA,IAAI,CAACsB,UAAL,CAAgB,GAAhB,EAAoB,oBAApB;AACA;;kDACMtB,IAAI,CAACuB,IAAL,CAAUnB,GAAV,C;;;;;AAEP2B,gBAAAA,OAAO,CAACC,GAAR;AACAhC,gBAAAA,IAAI,CAACwB,QAAL,CAAc,GAAd;kDACOxB,IAAI,CAACuB,IAAL,CAAUnB,GAAV,C;;;;;;;;;;;;;;;;;;;;eAKKF,a","sourcesContent":["import mapServices from '../services/mapServices';\nimport Util from '../utils/Utils';\n\nconst util=new Util();\n\nclass mapController{\n\tstatic async getAlldzoThrom(req,res){\n\t\ttry{\n\t\t\tconst dzoThromdes=await mapServices.getAlldzoThrom();\n\t\t\tif(dzoThromdes.length > 0){\n\t\t\t\tconst result=dzoThromdes.map((row)=>{\n\t\t\t\t\tlet geojson=JSON.parse(row.st_asgeojson);\n\t\t\t\t\tgeojson.properties = { name: row.name, thromdetype: row.thromdetyp, area: row.shape_area }\n\t\t\t\t\treturn geojson;\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\tutil.setSuccess(200,'Thromdes Retrieved',result);\n\t\t\t}else{\n\t\t\t\tutil.setSuccess(200,'No Thromdes found');\n\t\t\t}\n\t\t\treturn util.send(res);\n\t\t}catch(error){\n\t\t\tutil.setError(400,error);\n\t\t\t\n\t\t\treturn util.send(res);\n\t\t}\n\t}\n\n\tstatic async getBuilding(req,res){\n\t\tconst {dzo} = req.params;\n\t\ttry{\n\t\t\tconst buildings= await mapServices.getBuilding(dzo);\n\t\t\tif(buildings.length > 0){\n\t\t\t\tconst result = buildings.map((row)=>{\n\t\t\t\t\tlet geojson=JSON.parse(row.st_asgeojson);\n\t\t\t\t\tgeojson.properties = {id: row.osm_id, name: row.name}\n\t\t\t\t\treturn geojson;\n\t\t\t\t})\n\t\t\t\tutil.setSuccess(200,'Buildings Retrieved',result);\n\t\t\t}else{\n\t\t\t\tutil.setSuccess(200,'No buildings found');\n\t\t\t}\n\t\t\treturn util.send(res);\n\t\t}catch(error){\n\t\t\tconsole.log(error);\n\t\t\tutil.setError(400, error);\n\t\t\treturn util.send(res);\n\t\t}\n\t}\n}\n\nexport default mapController;\n"],"file":"mapController.js"}